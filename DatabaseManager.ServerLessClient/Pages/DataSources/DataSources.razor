@page "/datasources"
@inject HttpClient client
@inject ILocalStorageService localStorage
@inject SingletonService settings

<h3>Data Connectors</h3>

<div class="dropdown" style="margin-top:20px">
    <button @onclick="ToggleDropdownMenu" class="btn btn-info dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="@expandedState">
        New Connector
    </button>
    <div class="dropdown-menu collapse @showMenu">
        @foreach (var type in SourceTypes)
        {
            <a class="dropdown-item" href="/datasources/create/@type">@type</a>
        }
    </div>

</div>

<br />

<Table TableItem="ConnectParameters" Items="ConnectParameters" PageSize="@pageSize">
    <Column TableItem="ConnectParameters" Title="Action" Sortable="false">
        <Template>
            <a class="btn btn-success" href="/datasources/edit/@context.SourceName">Edit</a>
            <button class="btn btn-danger" @onclick="@(() => DeleteSources(context.SourceName))">Delete</button>
        </Template>
    </Column>
    <Column TableItem="ConnectParameters" Title="Name" Field="@(x => x.SourceName)" Sortable="true" Filterable="true" DefaultSortColumn="true"></Column>
    <Column TableItem="ConnectParameters" Title="Source Type" Field="@(x => x.SourceType)" Sortable="true" Filterable="true"></Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>

@code {
    List<ConnectParameters> ConnectParameters;
    private List<string> SourceTypes = new List<string> { "DataBase", "File" };
    private bool expandedState = false;
    private string showMenu = null;
    int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string url = settings.BaseUrl + "GetDataSources";
            ConnectParameters = await client.GetFromJsonAsync<List<ConnectParameters>>(url);
            Console.WriteLine($"Number of sources are {ConnectParameters.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task DeleteSources(string name)
    {
        try
        {
            string url = settings.BaseUrl + "DeleteDataSource?name=" + name;
            await client.DeleteAsync(url);
            url = settings.BaseUrl + "GetDataSources";
            ConnectParameters = await client.GetFromJsonAsync<List<ConnectParameters>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
        this.StateHasChanged();
    }

    private void ToggleDropdownMenu()
    {
        expandedState = !expandedState;
        showMenu = expandedState ? "show" : null;
    }
}
