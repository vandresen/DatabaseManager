@page "/uniquenessreportdrilldown/{Id:int}"
@inject IRuleService rules
@inject BlazorSingletonService singleton
@inject IReport rp
@using MudBlazor

<h3>@header</h3>

@if (isLoading)
{
    <div style="display:flex; justify-content:center; align-items:center; height:200px;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}
else if (dataDeleted)
{
    <text>All QC failures have been corrected...</text>
}
else
{
    <MudTable Items="@reportList" Dense="true" Hover="true" ReadOnly="false"  
    Striped="true" IsEditRowSwitchingBlocked="false" Filter="new Func<ReportData, bool>(FilterFunc)"
    CommitEditTooltip="Commit Edit">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@header</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col style="width:50px;" />
            <col style="width:50px;" />
            <col style="width:50px;" />
            <col style="width:140px;"/>
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh style="background-color:lightgray">Merge</MudTh>
            <MudTh style="background-color:lightgray">Delete</MudTh>
            <MudTh style="background-color:lightgray">Detail</MudTh>
            <MudTh style="background-color:lightgray"><MudTableSortLabel SortBy="new Func<ReportData, object>(x=>x.Id)">Index Id</MudTableSortLabel></MudTh>
            <MudTh style="background-color:lightgray"><MudTableSortLabel SortBy="new Func<ReportData, object>(x=>x.Key)">Data Key</MudTableSortLabel></MudTh>
            <MudTh style="background-color:lightgray"><MudTableSortLabel SortBy="new Func<ReportData, object>(x=>x.TextValue)">Uniqueness Key</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="">
                <MudFab @onclick="@(()=>Merge(@context.Id))" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Merge" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd DataLabel="">
                <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd>
                <MudFab @onclick="@(() => ShowBtnPress(context.Id))" Color="Color.Primary" StartIcon="@((context.ShowDetails == true)? @UnHideIcon : @HideIcon)" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd DataLabel="Index Id">@context.Id</MudTd>
            <MudTd DataLabel="Data Key">@context.Key</MudTd>
            <MudTd DataLabel="Uniqueness Key">@context.TextValue</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <ChildRowContent>
            @if (context.ShowDetails)
            {
                <MudTr>
                    <td colspan="4">
                        <MudCard Elevation="0">
                            <MudCardContent>
                                <MudText>Data Object</MudText>
                                <MudText Typo="Typo.body2">@context.JsonData</MudText>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
    </MudTable>
}

@code {
    [Parameter] public int Id { get; set; }
    private string header = "";
    List<ReportData> reportList;
    public RuleModelDto ruleModel;
    public List<DmsIndex> dataIndex;
    private bool dataDeleted = false;
    private bool isLoading = true;
    private string searchString = "";
    private string UnHideIcon = Icons.Material.Filled.HorizontalRule;
    private string HideIcon = Icons.Material.Filled.Add;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        Console.WriteLine($"Rule id = {Id}");
        ruleModel = await rules.GetRuleAsync(singleton.TargetConnector, Id);
        header = ruleModel.RuleName;
        reportList = await CreateReportList();
        Console.WriteLine($"Number of failures are {dataIndex.Count}");
        isLoading = false;
    }

    private async Task<List<ReportData>> CreateReportList()
    {
        dataIndex = await rp.GetResult(singleton.TargetConnector, Id);
        if (dataIndex.Count == 0) dataDeleted = true;
        else if (dataIndex != null)
        {
            DmsIndex firstObject = dataIndex.First();
            string jsonData = firstObject.JsonData;
            if (string.IsNullOrEmpty(jsonData)) dataDeleted = true;
        }
        reportList = new List<ReportData>();
        foreach (var item in dataIndex)
        {
            string key = item.DataKey;
            reportList.Add(new ReportData
                {
                    Id = item.Id,
                    JsonData = item.JsonData,
                    Key = key,
                    RuleKey = ruleModel.RuleKey,
                    TextValue = item.UniqKey
                });
        }
        return reportList;
    }

    private async Task Delete(int id)
    {
        Console.WriteLine($"Delete index id {id}");
        await rp.Delete(id, singleton.TargetConnector);
        List<ReportData> reportList = await CreateReportList();
        this.StateHasChanged();
    }

    private async Task Merge(int id)
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            Console.WriteLine($"Merge index id {id}");
            ReportData report = reportList.FirstOrDefault(x => x.Id == id);
            await rp.Merge(singleton.TargetConnector, report);
            reportList = await CreateReportList();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowBtnPress(int id)
    {
        ReportData item = reportList.First(f => f.Id == id);
        item.ShowDetails = !item.ShowDetails;
    }

    private bool FilterFunc(ReportData item)
    {
        Console.WriteLine($"Filter Function");
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (item.JsonData.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
