@using MudBlazor
@inject DatabaseManager.ServerLessClient.Services.IDataSources dataSources
@inject IDataIndexer createIndex

@if (options == null || taxonomies == null)
{
    <text>Loading...</text>
}
else
{
    <EditForm Model="IndexParms" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-group">
            <MudSelect T="string" Label="Source:" @bind-Value="IndexParms.SourceName" Variant="Variant.Outlined">
                @foreach (var option in options)
                {
                    <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="form-group">
            <MudSelect T="string" Label="Target:" @bind-Value="IndexParms.TargetName" Variant="Variant.Outlined">
                @foreach (var option in options)
                {
                    <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="form-group">
            <MudSelect T="string" Label="Taxonomy:" @bind-Value="IndexParms.Taxonomy" Variant="Variant.Outlined">
                @foreach (var taxonomy in taxonomies)
                {
                    <MudSelectItem T="string" Value="@taxonomy">@taxonomy</MudSelectItem>
                }
            </MudSelect>
        </div>
        <button class="btn btn-success" type="submit">Save Changes</button>
    </EditForm>
}

@code {
    [Parameter] public CreateIndexParameters IndexParms { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    List<DatabaseManager.Shared.ConnectParameters> connectParameters;
    DatabaseManager.ServerLessClient.Models.ResponseDto response;
    public string[] options { get; set; }
    List<string> taxonomies;

    protected override async Task OnInitializedAsync()
    {
        response = await dataSources.GetSources<DatabaseManager.ServerLessClient.Models.ResponseDto>();
        connectParameters = JsonConvert.DeserializeObject<List<DatabaseManager.Shared.ConnectParameters>>(Convert.ToString(response.Result));
        // connectParameters = await dataSources.GetSources();
        options = connectParameters.Select(x => x.SourceName).ToArray();
        List<DatabaseManager.Shared.IndexFileList> indexFileList = await createIndex.GetTaxonomies();
        Console.WriteLine($"Number index files are {indexFileList.Count}");
        taxonomies = indexFileList.Select(s => s.Name).ToList();
    }
}
