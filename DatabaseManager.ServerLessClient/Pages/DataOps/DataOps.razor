@page "/dataops"
@inject HttpClient client
@inject ILocalStorageService localStorage
@inject IDisplayMessage displayMessage
@inject IDataOps dataOps
@using System.Text

<h3>Data Ops</h3>

<p>New Pipeline:</p>
<p><input @bind="@pipelineName" size="50" /></p>
<button class="btn btn-primary" @onclick="AddPipeline">Add New Pipeline</button>
<br />
<hr />

<Table TableItem="DataOpsPipes" Items="pipeList" PageSize="@pageSize" ColumnReorder="true">
    <Column TableItem="DataOpsPipes" Title="Action" Sortable="false">
        <Template>
            @*<a class="btn btn-success" href="/rules/edit/@singleton.TargetConnector/@context.Id">Edit</a>*@
            <button class="btn btn-danger" @onclick="@(() => DeletePipeline(context.Name))">Delete</button>
            <button class="btn btn-success" @onclick="@(() => ExecutePipeline(context.Name))">Execute</button>
        </Template>
    </Column>
    <Column TableItem="DataOpsPipes" Title="Pipe Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" DefaultSortColumn="true"></Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>

@code {
    string pipelineName;
    List<DataOpsPipes> pipeList;
    int pageSize = 10;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            pipeList = await dataOps.GetPipelines();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors {ex.ToString()}");
        }
    }

    private async Task AddPipeline()
    {
        try
        {
            if (string.IsNullOrEmpty(pipelineName))
            {
                await displayMessage.DisplayErrorMessage("Please enter a new pipeline name");
            }
            DataOpsPipes pipe = new DataOpsPipes();
            pipe.Name = pipelineName;
            await dataOps.CreatePipeline(pipe);
            pipeList = await dataOps.GetPipelines();
            pipelineName = "";
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
        Console.WriteLine($"Add pipeline {pipelineName}");
    }

    private async Task DeletePipeline(string name)
    {
        try
        {
            await dataOps.DeletePipeline(name);
            pipeList = await dataOps.GetPipelines();
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task ExecutePipeline(string name)
    {
        Console.WriteLine($"excute pipeline {name}");
        string baseUrl = "http://localhost:7071/api/";
        string url = "http://localhost:7071/api/GetDataOpsPipe";
        try
        {
            url = $"{url}?name={name}";
            string json = await client.GetStringAsync(url);
            List<PipeLine> pipelines = JsonConvert.DeserializeObject<List<PipeLine>>(json);
            Console.WriteLine($"Number of pipes are {pipelines.Count}");

            string azureStorage = await localStorage.GetItemAsync<string>("AzureStorage");
            List<DataOpParameters> parms = new List<DataOpParameters>();
            foreach (var pipe in pipelines)
            {
                parms.Add(new DataOpParameters()
                {
                    Id = pipe.Id,
                    Name = pipe.ArtifactType,
                    Url = baseUrl + pipe.ArtifactType,
                    StorageAccount = azureStorage,
                    Parameters = pipe.Parameters
                });
            }

            var jsonString = JsonConvert.SerializeObject(parms);
            Console.WriteLine(jsonString);
            var content = new StringContent(jsonString, Encoding.UTF8, "application/json");
            url = baseUrl + "ManageDataOps_HttpStart";
            Console.WriteLine($"Url = {url}");
            using var response = await client.PostAsync(url, content);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Sucessful data ops");
            }
            else
            {
                string errorMessage = response.ReasonPhrase;
                Console.WriteLine($"There was an error! {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

}
