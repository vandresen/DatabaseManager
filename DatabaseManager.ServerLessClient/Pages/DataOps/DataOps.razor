@page "/dataops"
@* @inject IDisplayMessage displayMessage *@
@inject IPopupMessage displayMessage
@inject DatabaseManager.ServerLessClient.Services.IDataOps dataOps
@inject BlazorSingletonService settings
@using System.Text

<h3>Data Ops</h3>

<style> 
input {
  padding: 5px 10px 5px 10px;
  margin: 2px 0;
  box-sizing: border-box;
  border: 1px solid black;
  width: 300px;
}
</style>

<p>New Pipeline:</p>
<p><input @bind="@pipelineName" size="50" /></p>
<button class="btn btn-primary" @onclick="AddPipeline">Add New Pipeline</button>
<br />
<hr />

<Table TableItem="DataOpsPipes" Items="pipeList" PageSize="@pageSize" ColumnReorder="true">
    <Column TableItem="DataOpsPipes" Title="Action" Sortable="false">
        <Template>
            <a class="btn btn-primary" href="/dataops/edit/@context.Name">Edit</a>
            <button class="btn btn-danger" @onclick="@(() => DeletePipeline(context.Name))">Delete</button>
            <button class="btn btn-success" @onclick="@(() => ExecutePipeline(context.Name))">Execute</button>
        </Template>
    </Column>
    <Column TableItem="DataOpsPipes" Title="Pipe Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" DefaultSortColumn="true"></Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>

<div>
    <p>DataOps status: @statusMessage</p>
</div>

@code {
    string pipelineName;
    private string statusMessage = "None running";
    List<DataOpsPipes> pipeList;
    List<DatabaseManager.Shared.PipeLine> pipelines;
    int pageSize = 10;
    DatabaseManager.ServerLessClient.Models.ResponseDto response;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            response = await dataOps.GetPipelines<DatabaseManager.ServerLessClient.Models.ResponseDto>();
            pipeList = JsonConvert.DeserializeObject<List<DataOpsPipes>>(Convert.ToString(response.Result));
            Console.WriteLine($"Pipes: {pipeList.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors {ex.ToString()}");
        }
    }

    private async Task AddPipeline()
    {
        try
        {
            if (string.IsNullOrEmpty(pipelineName))
            {
                await displayMessage.DisplayErrorMessage("Please enter a new pipeline name");
            }
            response = await dataOps.CreatePipeline<DatabaseManager.ServerLessClient.Models.ResponseDto>(pipelineName);
            response = await dataOps.GetPipelines<DatabaseManager.ServerLessClient.Models.ResponseDto>();
            pipeList = JsonConvert.DeserializeObject<List<DataOpsPipes>>(Convert.ToString(response.Result));
            pipelineName = "";
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
        Console.WriteLine($"Add pipeline {pipelineName}");
    }

    private async Task DeletePipeline(string name)
    {
        try
        {
            response = await dataOps.DeletePipeline<DatabaseManager.ServerLessClient.Models.ResponseDto>(name);
            response = await dataOps.GetPipelines<DatabaseManager.ServerLessClient.Models.ResponseDto>();
            pipeList = JsonConvert.DeserializeObject<List<DataOpsPipes>>(Convert.ToString(response.Result));
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task ExecutePipeline(string name)
    {
        Console.WriteLine($"excute pipeline {name}");
        try
        {
            response = await dataOps.GetPipeline<DatabaseManager.ServerLessClient.Models.ResponseDto>(name);
            pipelines = JsonConvert.DeserializeObject<List<DatabaseManager.Shared.PipeLine>>(Convert.ToString(response.Result));
            Console.WriteLine($"Number of pipes are {pipelines.Count}");

            List<DataOpParameters> parms = new List<DataOpParameters>();
            foreach (var pipe in pipelines)
            {
                parms.Add(new DataOpParameters()
                {
                    Id = pipe.Id,
                    Name = pipe.ArtifactType,
                    StorageAccount = settings.AzureStorage,
                    JsonParameters = pipe.Parameters.ToString()
                });
            }
            string parmString = JsonConvert.SerializeObject(parms);
            Console.WriteLine($"Pipeline parameters are {parmString}");
            statusMessage = "Starting";
            StateHasChanged();
            var result = await dataOps.ProcessPipeline(parms);
            Console.WriteLine(result.statusQueryGetUri);
            for (int i = 0; i < 100; i++)
            {
                DataOpsStatus status = await dataOps.GetStatus(result.statusQueryGetUri);
                Console.WriteLine(status.runtimeStatus);
                statusMessage = status.runtimeStatus + ": " + status.customStatus;
                StateHasChanged();
                if (status.runtimeStatus == "Completed") 
                {
                    statusMessage = status.runtimeStatus;
                    StateHasChanged();
                    break; 
                }
                await Task.Delay(1000);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

}
