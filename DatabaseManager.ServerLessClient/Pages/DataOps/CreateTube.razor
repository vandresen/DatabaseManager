@page "/createtube/{Name}/{TubeType}"
@using MudBlazor
@inject NavigationManager navigationManager
@inject BlazorSingletonService singleton
@inject DatabaseManager.ServerLessClient.Services.IDataOps ops
@inject DatabaseManager.ServerLessClient.Services.IDataSources dataSources

<h3>Create Tube</h3>

<p>Pipeline Name: @Name</p>
<p>Tube Type: @TubeType</p>
@*<p>Priority: <input @bind="priority" type="number" min="1" /></p>*@
<p>
    <MudNumericField @bind-Value="priority" Label="Priority" Variant="Variant.Outlined" Step="1" Min="0" />
</p>

@if (connectParameters == null)
{
    <text>Loading...</text>
}
else
{
    @if (TubeType == "CreateIndex")
    {
        <CreateIndexParmForm IndexParms="indexParms" OnValidSubmit="Save" />
    }
    else if (TubeType == "DataTransfer")
    {
        <CreateDataTransferParmForm TransferParms="transferParms" Connectors="connectParameters" OnValidSubmit="Save" />
    }
    else if (TubeType == "DataQC")
    {
        <CreateQCParmForm DataQcParms="qcParms" OnValidSubmit="Save" />
    }
    else if (TubeType == "Predictions")
    {
        <CreatePredictionParmForm PredictioncParms="predictionParms" OnValidSubmit="Save" />
    }
    else
    {
        <p>Tube type not supported</p>
        <p><button @onclick="Save">Save</button></p>
    }
}

@code {
    [Parameter] public string TubeType { get; set; }
    [Parameter] public string Name { get; set; }
    public CreateIndexParameters indexParms = new CreateIndexParameters();
    public DataQCParameters qcParms = new DataQCParameters();
    public TransferParameters transferParms = new TransferParameters();
    public PredictionParameters predictionParms = new PredictionParameters();
    public List<DatabaseManager.Shared.ConnectParameters> connectParameters;
    DatabaseManager.ServerLessClient.Models.ResponseDto response;
    int priority = 0;

    protected override async Task OnInitializedAsync()
    {
        response = await dataSources.GetSources<DatabaseManager.ServerLessClient.Models.ResponseDto>();
        connectParameters = JsonConvert.DeserializeObject<List<DatabaseManager.Shared.ConnectParameters>>(Convert.ToString(response.Result));
        if (TubeType == "CreateIndex")
        {
            indexParms.TargetName = singleton.TargetConnector;
            indexParms.SourceName = singleton.TargetConnector;
        }
        else if (TubeType == "DataTransfer")
        {
            transferParms.TargetName = singleton.TargetConnector;
            transferParms.SourceName = "Please select";
        }
        else if (TubeType == "DataQC")
        {
            qcParms.DataConnector = singleton.TargetConnector;
        }
        else if (TubeType == "Predictions")
        {
            predictionParms.DataConnector = singleton.TargetConnector;
        }

    }

    private async Task Save()
    {
        Console.WriteLine($"Name is {Name}");
        Console.WriteLine($"Priority is {priority}");
        string jsonString = "";
        response = await ops.GetPipeline<DatabaseManager.ServerLessClient.Models.ResponseDto>(Name);
        List<DatabaseManager.Shared.PipeLine> tubes = JsonConvert.DeserializeObject<List<DatabaseManager.Shared.PipeLine>>(Convert.ToString(response.Result));
        if (TubeType == "CreateIndex")
        {
            jsonString = JsonConvert.SerializeObject(indexParms);
            Console.WriteLine($"String is {jsonString}");
        }
        else if (TubeType == "DataQC")
        {
            jsonString = JsonConvert.SerializeObject(qcParms);
            Console.WriteLine($"String is {jsonString}");
        }
        else if (TubeType == "Predictions")
        {
            jsonString = JsonConvert.SerializeObject(predictionParms);
            Console.WriteLine($"String is {jsonString}");
        }
        else if (TubeType == "DataTransfer")
        {
            DatabaseManager.Shared.ConnectParameters sourceConnector = connectParameters.FirstOrDefault(obj => obj.SourceName == transferParms.SourceName);
            if (sourceConnector != null)
            {
                transferParms.SourceType = sourceConnector.SourceType;
                transferParms.SourceDataType = sourceConnector.DataType;
            }
            jsonString = JsonConvert.SerializeObject(transferParms);
            Console.WriteLine($"String is {jsonString}");
        }
        else
        {
            Console.WriteLine("Tube type not supported");
        }
        int maxId = 1;
        if (tubes == null || tubes.Count == 0)
        {
            tubes = new List<DatabaseManager.Shared.PipeLine>();
        }
        else
        {
            maxId = tubes.Select(i => i.Id).Max() + 1;
        }
        tubes.Add(new DatabaseManager.Shared.PipeLine
        {
            Id = maxId,
            Priority = priority,
            ArtifactType = TubeType,
            Parameters = jsonString
        });
        DataOpsPipes pipe = new DataOpsPipes { Name = Name };
        List<DatabaseManager.Shared.PipeLine> sortedTubes = tubes.OrderBy(o => o.Priority).ToList();
        response = await ops.SavePipeline<DatabaseManager.ServerLessClient.Models.ResponseDto>(pipe, sortedTubes);
        navigationManager.NavigateTo($"/dataops/edit/{Name}");
    }
}