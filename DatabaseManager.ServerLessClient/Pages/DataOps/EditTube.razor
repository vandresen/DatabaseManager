@page "/edittube/{Name}/{Id:int}"
@using MudBlazor
@inject NavigationManager navigationManager
@inject IDataOps ops
@inject IDataSources dataSources

<h3>Edit Tube</h3>

<p>Pipeline Name: @Name</p>
<p>Tube Type: @TubeType</p>
<p>
    <MudNumericField @bind-Value="priority" Label="Priority" Variant="Variant.Outlined" Step="1" Min="0" />
</p>

@if (TubeType == "CreateIndex")
{
    <CreateIndexParmForm IndexParms="indexParms" OnValidSubmit="Save" />
}
else if (TubeType == "DataQC")
{
    <CreateQCParmForm DataQcParms="qcParms" OnValidSubmit="Save" />
}
else if (TubeType == "Predictions")
{
    <CreatePredictionParmForm PredictioncParms="predictionParms" OnValidSubmit="Save" />
}
else if (TubeType == "DataTransfer")
{
    <CreateDataTransferParmForm TransferParms="transferParms" Connectors="connectParameters" OnValidSubmit="Save" />
}
else
{
    <p>Tube type not supported</p>
    <p><button @onclick="Save">Save</button></p>
}

@code {
    [Parameter] public int id { get; set; }
    [Parameter] public string Name { get; set; }
    CreateIndexParameters indexParms = new CreateIndexParameters();
    DataQCParameters qcParms = new DataQCParameters();
    public PredictionParameters predictionParms = new PredictionParameters();
    TransferParameters transferParms = new TransferParameters();
    List<PipeLine> tubes = new List<PipeLine>();
    public List<ConnectParameters> connectParameters;
    PipeLine tube = new PipeLine();
    string TubeType = "";
    int priority;

    protected override async Task OnInitializedAsync()
    {
        connectParameters = await dataSources.GetSources();
        Console.WriteLine($"In EditTube, number of connectors found is {connectParameters.Count}");
        tubes = await ops.GetPipeline(Name);
        tube = tubes.FirstOrDefault(x => x.Id == id);
        Console.WriteLine($"In EditTube, number of tubes found is {tubes.Count}");
        if (tube != null)
        {
            TubeType = tube.ArtifactType;
            priority = tube.Priority;
            string jsonParms = tube.Parameters;
            if (TubeType == "CreateIndex")
            {
                indexParms = JsonConvert.DeserializeObject<CreateIndexParameters>(jsonParms);
            }
            else if (TubeType == "DataQC")
            {
                qcParms = JsonConvert.DeserializeObject<DataQCParameters>(jsonParms);
            }
            else if (TubeType == "Predictions")
            {
                predictionParms = JsonConvert.DeserializeObject<PredictionParameters>(jsonParms);
            }
            else if (TubeType == "DataTransfer")
            {
                transferParms = JsonConvert.DeserializeObject<TransferParameters>(jsonParms);
            }
        }
    }

    private async Task Save()
    {
        Console.WriteLine($"Name is {Name}");
        Console.WriteLine($"Priority is {priority}");
        tube.Priority = priority;
        string jsonString = "";
        if (TubeType == "CreateIndex")
        {
            jsonString = JsonConvert.SerializeObject(indexParms);
            Console.WriteLine($"String is {jsonString}");
        }
        else if (TubeType == "DataQC")
        {
            jsonString = JsonConvert.SerializeObject(qcParms);
            Console.WriteLine($"String is {jsonString}");
        }
        else if (TubeType == "Predictions")
        {
            jsonString = JsonConvert.SerializeObject(predictionParms);
            Console.WriteLine($"String is {jsonString}");
        }
        else if (TubeType == "DataTransfer")
        {
            ConnectParameters sourceConnector = connectParameters.FirstOrDefault(obj => obj.SourceName == transferParms.SourceName);
            if (sourceConnector != null)
            {
                transferParms.SourceType = sourceConnector.SourceType;
                transferParms.SourceDataType = sourceConnector.DataType;
            }
            jsonString = JsonConvert.SerializeObject(transferParms);
            Console.WriteLine($"String is {jsonString}");
        }
        else
        {
            Console.WriteLine("Tube type not supported");
        }
        tube.Parameters = jsonString;
        DataOpsPipes pipe = new DataOpsPipes { Name = Name };
        List<PipeLine> sortedTubes = tubes.OrderBy(o => o.Priority).ToList();
        await ops.SavePipeline(pipe, sortedTubes);
        navigationManager.NavigateTo($"/dataops/edit/{Name}");
    }
}
