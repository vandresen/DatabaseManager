@page "/"
@inject ILocalStorageService localStorage
@inject SingletonServices settings
@inject HttpClient client
@inject IDisplayMessage displayMessage
@inject NavigationManager navigationManager
@inject IIndexView idxView
@using MudBlazor

<div class="jumbotron">
    <h1>Welcome to Database Manager</h1>
    <p class="lead">The tool to manage your PPDM databases</p>
</div>

<p>Target Database: @settings.TargetConnector</p>

@if (options == null)
{
    <br/>
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    <br/>
    <text>Loading...</text>
    <br/>
}
else
{
    <GenericSelector Options="options" Selection="Selected" Label="Choose Connector" />
}

@if (index == null)
{
    @if (spinner)
    {
        <br/>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        <br/>
    }
    <text>@indexStatus</text>
}
else
{
    <MudTable Items="@index" Hover="true" Bordered="true" Striped="true" Outlined="true" Dense="true">
        <ColGroup>
            <col style="width:10px;" />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh style="background-color:lightgray"></MudTh>
            <MudTh style="background-color:lightgray">Data Type</MudTh>
            <MudTh style="background-color:lightgray">Number Of Data Objects</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="">
                <MudFab @onclick="@(() => DataTypes(context))" Color="Color.Info" Icon="@Icons.Material.Filled.MoreHoriz" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd DataLabel="Sign">@context.DataType</MudTd>
            <MudTd DataLabel="Name">@context.NumberOfDataObjects</MudTd>
        </RowTemplate>
    </MudTable>
}


@code {
    public List<ConnectParameters> ConnectParameters;
    private List<string> options;
    public List<DmsIndex> index;
    private string indexStatus = "No index available";
    bool spinner = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            settings.AzureStorage = await localStorage.GetItemAsync<string>("AzureStorage");
            Console.WriteLine($"{settings.AzureStorage}");
            settings.BaseUrl = await localStorage.GetItemAsync<string>("BaseUrl");
            Console.WriteLine($"{settings.BaseUrl}");
            settings.ApiKey = await localStorage.GetItemAsync<string>("APIKey");
            Console.WriteLine($"{settings.ApiKey}");

            client.DefaultRequestHeaders.Remove("azurestorageconnection");
            client.DefaultRequestHeaders.Add("azurestorageconnection", settings.AzureStorage);

            string url = settings.BaseUrl + "GetDataSources" + "?code=" + settings.ApiKey;
            Console.WriteLine(url);
            ConnectParameters = await client.GetFromJsonAsync<List<ConnectParameters>>(url);
            options = new List<string>();
            foreach (ConnectParameters conn in ConnectParameters)
            {
                if (conn.SourceType != "File") options.Add(conn.SourceName);
            }
            if (!string.IsNullOrEmpty(settings.TargetConnector))
            {
                await GetIndexData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            if (ex.ToString().Contains("Connection string is not set"))
            {
                await displayMessage.DisplayErrorMessage("Azure storage connection string is missing. Use Settings to set it temporary for the session");
            }
            else if (ex.ToString().Contains("Unauthorized"))
            {
                await displayMessage.DisplayErrorMessage("API key may be missing or invalid. Use Settings to set it");
            }
            else
            {
                await displayMessage.DisplayErrorMessage(" There is a problem accessing server");
            }
        }
    }

    private async Task Selected(string selectedString)
    {
        spinner = true;
        indexStatus = "Fetching index";
        StateHasChanged();
        ConnectParameters connector = ConnectParameters.FirstOrDefault(s => s.SourceName == selectedString);
        settings.TargetConnector = selectedString;
        settings.DataAccessDefinition = connector.DataAccessDefinition;
        await GetIndexData();
    }

    private async Task GetIndexData()
    {
        try
        {
            string url = settings.BaseUrl + 
            "GetIndexData" + 
            $"?name={settings.TargetConnector}&code=" + settings.ApiKey;
            Console.WriteLine(url);
            index = await client.GetFromJsonAsync<List<DmsIndex>>(url);
        }
        catch (Exception ex)
        {
            index = null;
            Console.WriteLine(ex);
            indexStatus = "No index found";
            StateHasChanged();
        }
    }

    private void DataTypes(DmsIndex item)
    {
        string url = @"/ChildData/" + $"{item.Id}";
        navigationManager.NavigateTo(url);
    }
}
