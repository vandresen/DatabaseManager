@page "/"
@inject ILocalStorageService localStorage
@inject BlazorSingletonService settings
@inject DatabaseManager.Shared.SingletonServices settings2
@inject HttpClient client
@inject IDisplayMessage displayMessage
@inject NavigationManager navigationManager
@inject IIndexView idxView
@inject DatabaseManager.ServerLessClient.Services.IDataSources dataSourceService
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@using MudBlazor

<div class="jumbotron">
    <h1>Welcome to Database Manager</h1>
    <p class="lead">The tool to manage your PPDM databases</p>
</div>

@if (sqlite)
{
    <p>Project: @settings.Project</p>
    @if (projects == null)
    {
        <br />
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <br />
        <text>Loading...</text>
        <br />
    }
    else
    {
        <GenericSelector Options="projects" Selection="SelectedProject" Label="Choose Project" />
    }
}
else
{
    <p>Target Database: @settings.TargetConnector</p>

    @if (options == null)
    {
        <br />
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <br />
        <text>Loading...</text>
        <br />
    }
    else
    {
        <GenericSelector Options="options" Selection="Selected" Label="Choose Connector" />
    }
}

@if (index == null)
{
    @if (spinner)
    {
        <br/>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        <br/>
    }
    <text>@indexStatus</text>
}
else
{
    <MudTable Items="@index" Hover="true" Bordered="true" Striped="true" Outlined="true" Dense="true">
        <ColGroup>
            <col style="width:10px;" />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh style="background-color:lightgray"></MudTh>
            <MudTh style="background-color:lightgray">Data Type</MudTh>
            <MudTh style="background-color:lightgray">Number Of Data Objects</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="">
                <MudFab @onclick="@(() => DataTypes(context))" Color="Color.Info" Icon="@Icons.Material.Filled.MoreHoriz" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd DataLabel="Sign">@context.DataType</MudTd>
            <MudTd DataLabel="Name">@context.NumberOfDataObjects</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    public List<ConnectParametersDto> ConnectParameters;
    private List<string> projects;
    private List<string> options;
    public List<DatabaseManager.Shared.DmsIndex> index;
    private string indexStatus = "No index available";
    bool spinner = false;
    bool sqlite = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine($"SD.DataOpsManageAPIBase = {SD.DataOpsManageAPIBase}");
            Console.WriteLine($"SD.DataSourceAPIBase = {SD.DataSourceAPIBase}");
            Console.WriteLine($"SD.DataModelAPI = {SD.DataModelAPIBase}");
            Console.WriteLine($"SD.EsriKey = {SD.EsriKey}");
            settings.ServerLess = true;
            settings.AzureStorage = await localStorage.GetItemAsync<string>("AzureStorage");
            settings2.AzureStorage = settings.AzureStorage;
            settings2.IndexAPIBase = SD.IndexAPIBase;
            settings2.IndexKey = SD.IndexKey;
            settings2.DataConfigurationAPIBase = SD.DataConfigurationAPIBase;
            settings2.DataConfigurationKey = SD.DataConfigurationKey;
            settings2.DataModelAPIBase = SD.DataModelAPIBase;
            settings2.DataModelKey = SD.DataModelKey;
            settings2.DataRuleAPIBase = SD.DataRuleAPIBase;
            settings2.DataRuleKey = SD.DataRuleKey;
            settings2.DataTransferAPIBase = SD.DataTransferKey;
            settings2.DataTransferKey = SD.DataTransferKey;
            Console.WriteLine($"Azure settings: {settings.AzureStorage}");
            settings.BaseUrl = await localStorage.GetItemAsync<string>("BaseUrl");
            settings.ApiKey = await localStorage.GetItemAsync<string>("APIKey");
            Console.WriteLine($"Sqlite = {SD.Sqlite}");
            sqlite = SD.Sqlite;

            client.DefaultRequestHeaders.Remove("azurestorageconnection");
            client.DefaultRequestHeaders.Add("azurestorageconnection", settings.AzureStorage);

            if (sqlite)
            {
                projects = await idxView.GetIndexProjects();
                if (string.IsNullOrEmpty(settings.Project) == true) settings.Project = "Default";
                await GetIndexData();
            }
            else
            {
                DatabaseManager.BlazorComponents.Models.ResponseDto response = await dataSourceService.GetSources<DatabaseManager.BlazorComponents.Models.ResponseDto>();
                if (response != null && response.IsSuccess)
                {
                    ConnectParameters = JsonConvert.DeserializeObject<List<ConnectParametersDto>>(Convert.ToString(response.Result));
                }
                else
                {
                    Console.WriteLine(response.ErrorMessages);
                    await displayMessage.DisplayErrorMessage(" There is a problem accessing data source server");
                }
                options = new List<string>();
                foreach (ConnectParametersDto conn in ConnectParameters)
                {
                    if (conn.SourceType != "File") options.Add(conn.SourceName);
                }
                if (!string.IsNullOrEmpty(settings.TargetConnector))
                {
                    await GetIndexData();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            if (ex.ToString().Contains("Connection string is not set"))
            {
                await displayMessage.DisplayErrorMessage("Azure storage connection string is missing. Use Settings to set it temporary for the session");
            }
            else if (ex.ToString().Contains("Unauthorized"))
            {
                await displayMessage.DisplayErrorMessage("API key may be missing or invalid. Use Settings to set it");
            }
            else
            {
                await displayMessage.DisplayErrorMessage(" There is a problem accessing server");
            }
        }
    }

    private async Task Selected(string selectedString)
    {
        spinner = true;
        indexStatus = "Fetching index";
        StateHasChanged();
        var connector = ConnectParameters.FirstOrDefault(s => s.SourceName == selectedString);
        settings.TargetConnector = selectedString;
        settings.DataAccessDefinition = connector.DataAccessDefinition;
        settings2.TargetConnector = selectedString;
        settings2.DataAccessDefinition = connector.DataAccessDefinition;
        await GetIndexData();
    }

    private async Task SelectedProject(string selectedString)
    {
        Console.WriteLine($"Selected project is {selectedString}");
        settings.Project = selectedString;
        spinner = true;
        indexStatus = "Fetching index";
        StateHasChanged();
        await GetIndexData();
    }

    private async Task GetIndexData()
    {
        try
        {
            if (sqlite) index = await idxView.GetIndex(settings.Project);
            else index = await idxView.GetIndex(settings.TargetConnector);
        }
        catch (Exception ex)
        {
            index = null;
            Console.WriteLine(ex);
            indexStatus = "No index found";
            StateHasChanged();
        }
    }

    private void DataTypes(DatabaseManager.Shared.DmsIndex item)
    {
        string url = @"/ChildData/" + $"{item.Id}";
        navigationManager.NavigateTo(url);
    }
}
