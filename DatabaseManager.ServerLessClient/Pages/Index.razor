@page "/"
@inject ILocalStorageService localStorage
@inject SingletonService settings
@inject HttpClient client
@inject IDisplayMessage displayMessage

<div class="jumbotron">
    <h1>Welcome to Database Manager tool</h1>
    <p class="lead">The tool to manage your PPDM databases</p>
</div>

<p>Target Database: @settings.TargetConnector</p>

@if (options == null)
{
    <text>Loading...</text>
}
else
{
    <GenericSelector Options="options" Selection="Selected" Label="Choose Connector" />
}


@code {
    public List<ConnectParameters> ConnectParameters;
    private List<string> options { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            client.Timeout = TimeSpan.FromMinutes(settings.HttpTimeOut);

            settings.AzureStorage = await localStorage.GetItemAsync<string>("AzureStorage");
            Console.WriteLine($"{settings.AzureStorage}");
            settings.BaseUrl = await localStorage.GetItemAsync<string>("BaseUrl");
            Console.WriteLine($"{settings.BaseUrl}");
            settings.ApiKey = await localStorage.GetItemAsync<string>("APIKey");
            Console.WriteLine($"{settings.ApiKey}");

            client.DefaultRequestHeaders.Remove("azurestorageconnection");
            client.DefaultRequestHeaders.Add("azurestorageconnection", settings.AzureStorage);

            string url = settings.BaseUrl + "GetDataSources" + "?code=" + settings.ApiKey;
            Console.WriteLine(url);
            ConnectParameters = await client.GetFromJsonAsync<List<ConnectParameters>>(url);
            //ConnectParameters = await dataSources.GetSources();
            foreach (ConnectParameters conn in ConnectParameters)
            {
                if (conn.SourceType != "File") options.Add(conn.SourceName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            if (ex.ToString().Contains("Connection string is not set"))
            {
                await displayMessage.DisplayErrorMessage("Azure storage connection string is missing. Use Settings to set it temporary for the session");
            }
            else if (ex.ToString().Contains("Unauthorized"))
            {
                await displayMessage.DisplayErrorMessage("API key may be missing or invalid. Use Settings to set it");
            }
            else
            {
                await displayMessage.DisplayErrorMessage(" There is a problem accessing server");
            }
        }
    }

    private async Task Selected(string selectedString)
    {
        //indexStatus = "Fetching index";
        //StateHasChanged();
        ConnectParameters connector = ConnectParameters.FirstOrDefault(s => s.SourceName == selectedString);
        settings.TargetConnector = selectedString;
        settings.DataAccessDefinition = connector.DataAccessDefinition;
        //await GetIndexData();
    }

}
