@page "/settings"
@inject NavigationManager navigationManager
@inject BlazorSingletonService settings
@inject ICookies cookies
@inject ILocalStorageService localStorage
@inject HttpClient client
@using MudBlazor
@using DatabaseManager.BlazorComponents.Pages.Settings

<style>
    input {
        padding: 12px 20px;
        margin: 8px 0;
        box-sizing: border-box;
        border: 2px solid black;
        border-radius: 4px;
    }
</style>

<h3>Settings</h3>

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
    <MudTabPanel Text="System settings">
        <br />
            <MudTextField @bind-Value="@AzureStorage" Label="Azure Storage:" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <br />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SaveServerless">Save</MudButton>
    </MudTabPanel>
    <MudTabPanel Text="Taxonomy">
        <TaxonomySettings></TaxonomySettings>
    </MudTabPanel>
    <MudTabPanel Text="Data Access">
        <DataAccessSettings></DataAccessSettings>
    </MudTabPanel>
    @if (SD.Sqlite)
    {
        <MudTabPanel Text="Manage Projects">
            <ManageProjects></ManageProjects>
        </MudTabPanel>
    }
</MudTabs>

@code {
    string AzureStorage;
    string baseUrl;
    string apiKey;
    int ExpirationDays = 7;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Init settings");
        if(settings.ServerLess)
        {
            AzureStorage = settings.AzureStorage;
            baseUrl = settings.BaseUrl;
            apiKey = settings.ApiKey;
        }
        else
        {
            Console.WriteLine($"{AzureStorage}");
        }
    }

    private async Task SaveServerless()
    {
        if (!string.IsNullOrEmpty(AzureStorage))
        {
            await localStorage.SetItemAsync("AzureStorage", AzureStorage);
            // await localStorage.SetItemAsync("BaseUrl", baseUrl);
            // await localStorage.SetItemAsync("APIKey", apiKey);
            client.DefaultRequestHeaders.Remove("AzureStorageConnection");
            client.DefaultRequestHeaders.Add("AzureStorageConnection", AzureStorage);
        }
        navigationManager.NavigateTo("/");
    }
}
