@inject SingletonServices settings
@inject DatabaseManager.Common.Services.IDataSources dataSources

<EditForm Model="TransferParameters" OnValidSubmit="OnValidSubmit">
    <div class="container">
        <div class="row">
            <div class="col-sm-12 form-group">
                <label>Filter:</label>
                <input @bind="@TransferParameters.TransferQuery" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm-8">
                <h3>Source Database</h3>
            </div>
            <div class="col-sm-4">
                <h3>Target Database</h3>
            </div>
        </div>
        <div class="row">
            <div class="col">
                @if (options == null)
                {
                    <text>Loading...</text>
                }
                else
                {
                    <ConnectorSelector Options="options" SelectedConnector="Selected" />
                }
            </div>
            <div class="col">
                <button class="btn btn-success" type="submit">>>></button>
            </div>
            <div class="col">
                <p>Target Database: @settings.TargetConnector</p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 form-group">
                <label>Remote source: </label>
                <InputCheckbox @bind-Value="TransferParameters.Remote" />
            </div>

        </div>
    </div>
</EditForm>

@code {
    [Parameter] public TransferParameters TransferParameters { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    public bool remote { get; set; }
    private List<string> options { get; set; } = new List<string>();
    List<ConnectParameters> ConnectParameters;
    string queryString;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Transfer Parameter Form");
            ConnectParameters = await dataSources.GetSources();
            foreach (ConnectParameters conn in ConnectParameters)
            {
                options.Add(conn.SourceName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private void Selected(string selectedString)
    {
        TransferParameters.SourceName = selectedString;
        ConnectParameters connector = ConnectParameters.FirstOrDefault(s => s.SourceName == selectedString);
        TransferParameters.SourceType = connector.SourceType;
        Console.WriteLine($"Remote = {TransferParameters.Remote}");
    }
}
