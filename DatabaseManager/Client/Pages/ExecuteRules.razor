@page "/executerules"
@using MudBlazor
@inject IDisplayMessage displayMessage
@inject IDataQc dq
@inject SingletonServices singleton
@inject NavigationManager navigationManager

<h3>Execute Rules</h3>

<br />

<MudForm>
    <MudRadioGroup T="string" SelectedOption="@SelectedOption" SelectedOptionChanged="OnSelectedOptionChanged">
        <MudRadio Option="@("Data QC")" Color="Color.Primary">Data QC</MudRadio>
        <MudRadio Option="@("Predictions")" Color="Color.Secondary">Predictions</MudRadio>
    </MudRadioGroup>
</MudForm>

<br />

@if (string.IsNullOrEmpty(SelectedOption))
{
    <p>Waiting for input</p>
}
else
{
    <p>Starting @SelectedOption</p>
}

@code {
    public string SelectedOption { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(singleton.TargetConnector))
        {
            await displayMessage.DisplayErrorMessage("Please select a data connector");
            navigationManager.NavigateTo("/");
        }
    }

    private async Task OnSelectedOptionChanged(string option)
    {
        SelectedOption = option;
        if (option == "Data QC")
        {
            await ExecuteDataQc();
        }
        else if (option == "Predictions")
        {
            await ExecutePredictions();
        }
        else
        {
            Console.WriteLine("Invalid option");
        }
    }

    private async Task ExecuteDataQc()
    {

        // Clear QC flags

        // get all QC rules

        // QC check each QC rule

        // Close data qc

        DataQCParameters qcParams = new DataQCParameters();

        Console.WriteLine("Start QC Processing");
        List<QcResult> ResultList = await dq.GetResults(singleton.TargetConnector);
        Console.WriteLine($"Number of rules = {ResultList.Count}");
        qcParams.ClearQCFlags = false;
        qcParams.DataConnector = singleton.TargetConnector;
        await dq.ClearQCFlags(singleton.TargetConnector);
        List<RuleFailures> failures = new List<RuleFailures>();
        foreach (QcResult rule in ResultList)
        {
            qcParams.RuleId = rule.Id;
            DataQCParameters newQcParms = await dq.ProcessQCRule(qcParams);
            failures.Add(new RuleFailures { RuleId = newQcParms.RuleId, Failures = newQcParms.Failures });
        }
        await dq.CloseQC(singleton.TargetConnector, failures);
    }

    private async Task ExecutePredictions()
    {
        await displayMessage.DisplayErrorMessage("Predictions not implemented yet");
    }
}
