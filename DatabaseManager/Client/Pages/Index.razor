@page "/"
@inject IDisplayMessage displayMessage
@inject HttpClient client
@inject ICookies cookies
@inject IDataSources dataSources
@inject SingletonService settings
@inject IIndexView idxView
@inject NavigationManager navigationManager

<div class="jumbotron">
    <h1>Welcome to Database Manager</h1>
    <p class="lead">The tool to manage your PPDM databases</p>
</div>

<p>Target Database: @settings.TargetConnector</p>

@if (options == null)
{
    <text>Loading...</text>
}
else
{
    <GenericSelector Options="options" Selection="Selected" Label="Choose Connector" />
}

@if (index == null)
{
    <text>@indexStatus</text>
}
else
{
    <GenericList List="index">
        <WholeListTemplate>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th></th>
                        <th>Data Type</th>
                        <th>Number Of Data Objects</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in index)
                    {
                        <tr>
                            <td>
                                <button class="btn btn-info" @onclick="@(() => DataTypes(item))">...</button>
                            </td>
                            <td>@item.DataType</td>
                            <td>@item.NumberOfDataObjects</td>
                        </tr>
                    }
                </tbody>
            </table>
        </WholeListTemplate>
    </GenericList>
}

@code {
    public List<ConnectParameters> ConnectParameters;
    private List<string> options { get; set; } = new List<string>();
    public List<DmsIndex> index;
    private string indexStatus = "No index available";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Start index page");
            string currentHeader = "";
            if (client.DefaultRequestHeaders.Contains("AzureStorageConnection"))
            {
                Console.WriteLine("Contains azure storage");
                currentHeader = client.DefaultRequestHeaders.GetValues("AzureStorageConnection").FirstOrDefault();
            }
            Console.WriteLine(currentHeader);
            CookieParameters cookieParams = await cookies.GetCookie();
            Console.WriteLine($"Cookie value: {cookieParams.Value}");
            if (!string.IsNullOrEmpty(cookieParams.Value))
            {
                if (cookieParams.Value != currentHeader)
                {
                    client.DefaultRequestHeaders.Add("AzureStorageConnection", cookieParams.Value);
                }
            }
            ConnectParameters = await dataSources.GetSources();
            Console.WriteLine($"Connector count: {ConnectParameters.Count}");
            foreach (ConnectParameters conn in ConnectParameters)
            {
                if (conn.SourceType != "File") options.Add(conn.SourceName);
            }
            if (!string.IsNullOrEmpty(settings.TargetConnector))
            {
                await GetIndexData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            if (ex.ToString().Contains("Connection string is not set"))
            {
                await displayMessage.DisplayErrorMessage("Azure storage connection string is missing. Use Settings to set it temporary for the session");
            }
            else if (ex.ToString().Contains("Unauthorized"))
            {
                await displayMessage.DisplayErrorMessage("API key may be missing or invalid. Use Settings to set it");
            }
            else
            {
                await displayMessage.DisplayErrorMessage(" There is a problem accessing server");
            }
        }
    }

    private async Task Selected(string selectedString)
    {
        indexStatus = "Fetching index";
        StateHasChanged();
        ConnectParameters connector = ConnectParameters.FirstOrDefault(s => s.SourceName == selectedString);
        settings.TargetConnector = selectedString;
        settings.DataAccessDefinition = connector.DataAccessDefinition;
        await GetIndexData();
    }

    private async Task GetIndexData()
    {
        try
        {
            index = await idxView.GetIndex(settings.TargetConnector);
        }
        catch (Exception ex)
        {
            index = null;
            Console.WriteLine(ex);
            indexStatus = "No index found";
            StateHasChanged();
        }
    }

    private void DataTypes(DmsIndex item)
    {
        string url = @"/ChildData/" + $"{item.Id}";
        navigationManager.NavigateTo(url);
    }
}

