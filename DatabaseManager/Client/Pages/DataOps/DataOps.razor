@page "/dataops"
@inject DatabaseManager.Common.Services.IDataOps ops
@inject IDisplayMessage displayMessage

<h3>Data Ops</h3>

<p>New Pipeline:</p>
<p><input @bind="@pipelineName" size="50" /></p>
<button class="btn btn-primary" @onclick="AddPipeline">Add New Pipeline</button>
<br />
<hr />

<Table TableItem="DataOpsPipes" Items="pipeList" PageSize="@pageSize" ColumnReorder="true">
    <Column TableItem="DataOpsPipes" Title="Action" Sortable="false">
        <Template>
            @*<a class="btn btn-success" href="/rules/edit/@singleton.TargetConnector/@context.Id">Edit</a>*@
            <button class="btn btn-danger" @onclick="@(() => DeletePipeline(context.Name))">Delete</button>
            <button class="btn btn-success" @onclick="@(() => ExecutePipeline(context.Name))">Execute</button>
        </Template>
    </Column>
    <Column TableItem="DataOpsPipes" Title="Pipe Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" DefaultSortColumn="true"></Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>


@code{
    string pipelineName;

    List<DataOpsPipes> pipeList;
    int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        pipeList = await ops.GetPipelines();
    }

    private async Task ExecutePipeline(string name)
    {
        Console.WriteLine($"excute pipeline {name}");
        try
        {
            List<PipeLine> pipelines = await ops.GetPipeline(name);
            Console.WriteLine($"Number of pipes are {pipelines.Count}");
            List<DataOpParameters> parms = new List<DataOpParameters>();
            foreach (var pipe in pipelines)
            {
                string jsonParm = pipe.Parameters.ToString();
                Console.WriteLine(jsonParm);
                parms.Add(new DataOpParameters()
                {
                    Id = pipe.Id,
                    Name = pipe.ArtifactType,
                    JsonParameters = jsonParm
                });
            }

            await ops.ProcessPipeline(parms);
            Console.WriteLine("Finished dataops");
            //await ops.ProcessPipeline(name);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task AddPipeline()
    {
        try
        {
            if (string.IsNullOrEmpty(pipelineName))
            {
                await displayMessage.DisplayErrorMessage("Please enter a new pipeline name");
            }
            DataOpsPipes pipe = new DataOpsPipes();
            pipe.Name = pipelineName;
            await ops.CreatePipeline(pipe);
            pipeList = await ops.GetPipelines();
            pipelineName = "";
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
        Console.WriteLine($"Add pipeline {pipelineName}");
    }

    private async Task DeletePipeline(string name)
    {
        try
        {
            await ops.DeletePipeline(name);
            pipeList = await ops.GetPipelines();
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

}

