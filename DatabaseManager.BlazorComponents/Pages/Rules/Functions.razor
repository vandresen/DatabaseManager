@page "/rules/functions"
@inject SingletonServices singleton
@inject IRules rf
@using MudBlazor

<h3>Manage Rule Functions</h3>

<div class="form-group">
    <a class="btn btn-info" href="rules/newfunction">New Function</a>
</div>

<MudTable Items="@FunctionList" Dense="true" Hover="true">
    <ColGroup>
        <col style="width:50px;" />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh style="background-color:lightgray">Action</MudTh>
        <MudTh style="background-color:lightgray"><MudTableSortLabel SortBy="new Func<RuleFunctions, object>(x=>x.FunctionName)">Function Name</MudTableSortLabel></MudTh>
        <MudTh style="background-color:lightgray"><MudTableSortLabel SortBy="new Func<RuleFunctions, object>(x=>x.FunctionUrl)">Function URL</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudFab @onclick="@(() => Delete(context.Id))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
        <MudTd DataLabel="Function Name">@context.FunctionName</MudTd>
        <MudTd DataLabel="Data Key">@context.FunctionUrl</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    List<RuleFunctions> FunctionList;
    int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            FunctionList = await rf.GetFunctions(singleton.TargetConnector);
            Console.WriteLine($"Number of functions is {FunctionList.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task Delete(int id)
    {
        await rf.DeleteFunction(singleton.TargetConnector, id);
        FunctionList = await rf.GetFunctions(singleton.TargetConnector);
        this.StateHasChanged();
    }
}
