@page "/rules"
@inject IRules rules
@inject SingletonServices singleton
@inject IDisplayMessage displayMessage
@inject NavigationManager navigationManager

<h3>Rules</h3>

<div class="form-group">
    <a class="btn btn-info" href="rules/saveprediction">Save Prediction Set</a>
    <a class="btn btn-info" href="rules/getpredictions">Get Prediction Set</a>
</div>

<div class="form-group">
    <a class="btn btn-info" href="rules/functions">Manage Rule Functions</a>
</div>


<div class="dropdown" style="margin-top:20px">
    <button @onclick="ToggleDropdownMenu" class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="@expandedState">
        New Rule
    </button>
    <div class="dropdown-menu collapse @showMenu">
        @foreach (var rule in RuleTypes)
        {
            <a class="dropdown-item" href="createrule/@rule">@rule</a>
        }
    </div>
</div>

<Table TableItem="RuleModel" Items="RuleList" PageSize="@pageSize" ColumnReorder="true">
    <Column TableItem="RuleModel" Title="Action" Sortable="false">
        <Template>
            <a class="btn btn-success" href="/rules/edit/@singleton.TargetConnector/@context.Id">Edit</a>
            <button class="btn btn-danger" @onclick="@(() => RuleDelete(context.Id))">Delete</button>
        </Template>
    </Column>
    <Column TableItem="RuleModel" Title="Data Type" Field="@(x => x.DataType)" Sortable="true" Filterable="true" DefaultSortColumn="true"></Column>
    <Column TableItem="RuleModel" Title="Category" Field="@(x => x.RuleType)" Sortable="true" Filterable="true"></Column>
    <Column TableItem="RuleModel" Title="Rule Name" Field="@(x => x.RuleName)" Sortable="true" Filterable="true"></Column>
    <Column TableItem="RuleModel" Title="Active" Field="@(x => x.Active)" Sortable="true" Filterable="true"></Column>
    <Column TableItem="RuleModel" Title="Rule Key" Field="@(x => x.RuleKey)" Sortable="true" Filterable="true"></Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>

@code {
    private List<string> RuleTypes;
    List<RuleModel> RuleList;
    private bool expandedState = false;
    private string showMenu = null;
    int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(singleton.TargetConnector))
        {
            await displayMessage.DisplayErrorMessage("Please select a data connector");
            navigationManager.NavigateTo("/");
        }
        try
        {
            RuleTypeDictionary rt = new RuleTypeDictionary();
            RuleTypes = new List<string>();
            foreach (var item in rt._dictionary)
            {
                RuleTypes.Add(item.Key);
            }
            RuleList = await rules.GetRules(singleton.TargetConnector);
            Console.WriteLine(RuleList.Count);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task RuleDelete(int id)
    {
        try
        {
            await rules.DeleteRule(singleton.TargetConnector, id);
            RuleList = await rules.GetRules(singleton.TargetConnector);
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private void ToggleDropdownMenu()
    {
        expandedState = !expandedState;
        showMenu = expandedState ? "show" : null;
    }
}
