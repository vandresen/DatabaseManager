<EditForm Model="RuleToEdit" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Rule Name:</label>
        <div>
            <InputText class="form-control" @bind-Value="RuleToEdit.RuleName" />
            <ValidationMessage For="@(() => RuleToEdit.RuleName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Active:</label>
        <select @bind="RuleToEdit.Active">
            <option>Y</option>
            <option>N</option>
        </select>
    </div>

    <div class="form-group">
        <label>Data Type:</label>
        <select @onchange="SelectedDataType">
            @foreach (var option in DataRef.DataTypeOptions)
            {
                <option>@option</option>
            }
        </select>
    </div>

    @if (!noDataAttributes)
    {
        <div class="form-group">
            <label>Data Attribute:</label>
            @if (DataAttributeOptions == null)
            {
                <div>
                    <InputText class="form-control" @bind-Value="@RuleToEdit.DataAttribute" />
                    <ValidationMessage For="@(() => RuleToEdit.DataAttribute)" />
                </div>
            }
            else
            {
                <select @bind="RuleToEdit.DataAttribute">
                    @foreach (var att in DataAttributeOptions)
                    {
                        <option>@att</option>
                    }
                </select>
            }
        </div>
    }

    <div class="form-group">
        <label>Rule Parameters:</label>
        <div>
            <InputText class="form-control" @bind-Value="@RuleToEdit.RuleParameters" />
            <ValidationMessage For="@(() => RuleToEdit.RuleParameters)" />
        </div>
    </div>

    <div class="form-group">
        <label>Rule Filter:</label>
        <div>
            <InputText class="form-control" @bind-Value="@RuleToEdit.RuleFilter" />
            <ValidationMessage For="@(() => RuleToEdit.RuleFilter)" />
        </div>
    </div>

    @if (Type == "Predictions")
    {
        <div class="form-group">
            <label>Fail Rule:</label>
            <div>
                <InputText class="form-control" @bind-Value="RuleToEdit.FailRule" />
                <ValidationMessage For="@(() => RuleToEdit.FailRule)" />
            </div>
        </div>
        <div class="form-group">
            <label>Prediction Order:</label>
            <div>
                <InputNumber class="form-control" @bind-Value="RuleToEdit.PredictionOrder" />
                <ValidationMessage For="@(() => RuleToEdit.PredictionOrder)" />
            </div>
        </div>
    }

    @if (Type == "Validity" || Type == "Predictions")
    {
        <div class="form-group">
            <label>Rule Function:</label>
            <div>
                <select @bind="RuleToEdit.RuleFunction">
                    @foreach (var func in FunctionMethods)
                    {
                        <option>@func</option>
                    }
                </select>
                <ValidationMessage For="@(() => RuleToEdit.RuleFunction)" />
            </div>
        </div>
    }

    <div class="form-group">
        <label>Description:</label>
        <div>
            <InputText class="form-control" @bind-Value="@RuleToEdit.RuleDescription" />
            <ValidationMessage For="@(() => RuleToEdit.RuleDescription)" />
        </div>
    </div>

    <button class="btn btn-success" type="submit">Save Changes</button>
</EditForm>

@code {
    [Parameter] public RuleModel RuleToEdit { get; set; }
    [Parameter] public RuleInfo DataRef { get; set; }
    [Parameter] public string Type { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<string> FunctionMethods { get; set; }
    private List<string> DataAttributeOptions;
    private bool noDataAttributes = false;

    protected override void OnInitialized()
    {
        string dataType = DataRef.DataTypeOptions[0];
        DataAttributeOptions = GetAttributes(DataRef.DataAttributes[dataType]);
        RuleToEdit.DataType = dataType;
        RuleToEdit.RuleType = Type;
        RuleToEdit.Active = "Y";
        RuleToEdit.DataAttribute = DataAttributeOptions[0];
        RuleToEdit.RuleFunction = Type;
        if (Type == "Entirety" || Type == "Uniqueness") noDataAttributes = true;
    }

    private void SelectedDataType(ChangeEventArgs e)
    {
        string dataType = e.Value.ToString();
        RuleToEdit.DataType = dataType;
        DataAttributeOptions = GetAttributes(DataRef.DataAttributes[dataType]);
    }

    private List<string> GetAttributes(string attributeList)
    {
        List<string> attributes = attributeList.Split(',').ToList();
        return attributes;
    }
}
