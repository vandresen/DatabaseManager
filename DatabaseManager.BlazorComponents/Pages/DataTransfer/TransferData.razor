@page "/transferdata"
@inject SingletonServices settings
@inject IDisplayMessage displayMessage
@inject IDataSources dataSources
@inject IDataTransfer dataTransfer

<h2>Data Transfer</h2>
<br />

<TransferParametersForm TransferParameters="transferParameters" OnValidSubmit="StartDatabaseTransfer" />

<div style="margin-top:20px">
    <ProgressBar ValueNow="barValue" />
</div>

<div>
    <p>Current status: @statusMessage</p>
</div>


@code {
    private string statusMessage = "Not started";
    private string jsonString = "";
    private List<TransferParameters> dataObjects;
    TransferParameters transferParameters = new TransferParameters();
    public int barValue = 0;

    protected async Task StartDatabaseTransfer()
    {
        barValue = 0;
        Console.WriteLine("Start database transfer");
        string source = transferParameters.SourceName;
        string target = settings.TargetConnector;
        transferParameters.TargetName = target;
        Console.WriteLine($"Target source = {target}");

        if (transferParameters.Remote)
        {
            string info = "";
            if (transferParameters.SourceType != "DataBase")
            {
                await displayMessage.DisplayErrorMessage("Remote option only work for databases");
                return;
            }
            Console.WriteLine("Remote database has been selected");
            barValue = 1;
            progress($"Transfer starting");
            await dataTransfer.CopyRemote(transferParameters);

            for (int i = 0; i < 20; i++)
            {
                await Task.Delay(15000);
                List<MessageQueueInfo> messages = await dataTransfer.GetQueueMessage();
                foreach (var message in messages)
                {
                    Console.WriteLine(message);
                    info = message.Message;
                }
                barValue = (i * 5) + 1;
                progress(info);
                if (info == "Complete") break;
            }

            barValue = 100;
            progress($"Transfer Complete");
            return;
        }

        dataObjects = await dataTransfer.GetDataObjects(source);
        int barInt = 50 / dataObjects.Count;
        if (transferParameters.SourceType == "DataBase")
        {
            foreach (var dataObject in dataObjects)
            {
                progress($"Deleting from {dataObject.Table}");
                try
                {
                    await dataTransfer.DeleteTable(target, dataObject.Table);
                    barValue = barValue + barInt;
                }
                catch (Exception ex)
                {
                    progress($"Error Deleting from {dataObject.Table}: {ex.Message}");
                    if (ex.Message.Contains("Invalid object name"))
                    {
                        await displayMessage.DisplayErrorMessage("Table does not exist, have you created the data model?");
                    }
                    return;
                }
            }
            barInt = 50 / dataObjects.Count;
        }
        else
        {
            barInt = 100 / dataObjects.Count;
        }

        foreach (var dataObject in dataObjects)
        {
            transferParameters.Table = dataObject.Table;
            try
            {
                string tmpQuery = transferParameters.TransferQuery;
                progress($"Copying table {transferParameters.Table}");
                await dataTransfer.Copy(transferParameters);
                transferParameters.TransferQuery = tmpQuery;
                barValue = barValue + barInt;
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("Table does not exist"))
                {
                    await displayMessage.DisplayErrorMessage("Table does not exist, have you created the data model?");
                }
                progress($"Error copying from {transferParameters.Table}: {ex.Message}");
                return;
            }
        }

        barValue = 100;
        progress($"Transfer Complete");
    }

    private void progress(string message)
    {
        statusMessage = message;
        StateHasChanged();
    }
}