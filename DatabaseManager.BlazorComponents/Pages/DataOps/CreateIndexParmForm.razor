@using MudBlazor
@inject IDataSources dataSources

@if (options == null)
{
    <text>Loading...</text>
}
else
{
    <EditForm Model="IndexParms" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-group">
            <MudSelect T="string" Label="Source:" @bind-Value="IndexParms.SourceName" Variant="Variant.Outlined">
                @foreach (var option in options)
                {
                    <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="form-group">
            <MudSelect T="string" Label="Target:" @bind-Value="IndexParms.TargetName" Variant="Variant.Outlined">
                @foreach (var option in options)
                {
                    <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="form-group">
            <label>Taxonomy:</label>
            <div>
                <InputText class="form-control" @bind-Value="IndexParms.Taxonomy" />
                <ValidationMessage For="@(() => IndexParms.Taxonomy)" />
            </div>
        </div>
        <button class="btn btn-success" type="submit">Save Changes</button>
    </EditForm>
}

@code {
    [Parameter] public CreateIndexParameters IndexParms { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    List<ConnectParameters> connectParameters;
    public string[] options { get; set; }

    protected override async Task OnInitializedAsync()
    {
        connectParameters = await dataSources.GetSources();
        options = connectParameters.Select(x => x.SourceName).ToArray();
    }
}
