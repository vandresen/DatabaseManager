@page "/dataops"
@*@inject HttpClient client*@
@inject ILocalStorageService localStorage
@inject IDisplayMessage displayMessage
@inject IDataOps dataOps
@inject SingletonService settings
@using System.Text

<h3>Data Ops</h3>

<p>New Pipeline:</p>
<p><input @bind="@pipelineName" size="50" /></p>
<button class="btn btn-primary" @onclick="AddPipeline">Add New Pipeline</button>
<br />
<hr />

<Table TableItem="DataOpsPipes" Items="pipeList" PageSize="@pageSize" ColumnReorder="true">
    <Column TableItem="DataOpsPipes" Title="Action" Sortable="false">
        <Template>
            <a class="btn btn-primary" href="/dataops/edit/@context.Name">Edit</a>
            <button class="btn btn-danger" @onclick="@(() => DeletePipeline(context.Name))">Delete</button>
            <button class="btn btn-success" @onclick="@(() => ExecutePipeline(context.Name))">Execute</button>
        </Template>
    </Column>
    <Column TableItem="DataOpsPipes" Title="Pipe Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" DefaultSortColumn="true"></Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>

<div>
    <p>DataOps status: @statusMessage</p>
</div>

@code {
    string pipelineName;
    private string statusMessage = "None running";
    List<DataOpsPipes> pipeList;
    int pageSize = 10;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            pipeList = await dataOps.GetPipelines();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors {ex.ToString()}");
        }
    }

    private async Task AddPipeline()
    {
        try
        {
            if (string.IsNullOrEmpty(pipelineName))
            {
                await displayMessage.DisplayErrorMessage("Please enter a new pipeline name");
            }
            DataOpsPipes pipe = new DataOpsPipes();
            pipe.Name = pipelineName;
            await dataOps.CreatePipeline(pipe);
            pipeList = await dataOps.GetPipelines();
            pipelineName = "";
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
        Console.WriteLine($"Add pipeline {pipelineName}");
    }

    private async Task DeletePipeline(string name)
    {
        try
        {
            await dataOps.DeletePipeline(name);
            pipeList = await dataOps.GetPipelines();
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task ExecutePipeline(string name)
    {
        Console.WriteLine($"excute pipeline {name}");
        try
        {
            List<PipeLine> pipelines = await dataOps.GetPipeline(name);
            Console.WriteLine($"Number of pipes are {pipelines.Count}");

            List<DataOpParameters> parms = new List<DataOpParameters>();
            foreach (var pipe in pipelines)
            {
                parms.Add(new DataOpParameters()
                {
                    Id = pipe.Id,
                    Name = pipe.ArtifactType,
                    StorageAccount = settings.AzureStorage,
                    JsonParameters = pipe.Parameters.ToString()
                });
            }
            string parmString = JsonConvert.SerializeObject(parms);
            Console.WriteLine($"Pipeline parameters are {parmString}");
            var result = await dataOps.ProcessPipelineWithStatus(parms);
            for (int i = 0; i < 20; i++)
            {
                DataOpsStatus status = await dataOps.GetStatus(result.statusQueryGetUri);
                Console.WriteLine(status.runtimeStatus);
                statusMessage = status.runtimeStatus;
                StateHasChanged();
                if (status.runtimeStatus == "Completed") break;
                await Task.Delay(10000);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

}
