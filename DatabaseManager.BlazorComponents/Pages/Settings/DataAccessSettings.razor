@inject IDataConfiguration dataConfiguration
@inject IDisplayMessage displayMessage
@using DatabaseManager.BlazorComponents.Shared
@using MudBlazor

<br />
<MudSelector Selection="Selected" Options="files"></MudSelector>
<br />

@if(configType == "CSV")
{
    <CSVSettings Content="@content" ConfigFile="@configFile"></CSVSettings>
}
else if (configType == "PPDM")
{
    <PPDMSettings Content="@content" ConfigFile="@configFile"></PPDMSettings>
}
else
{
    <br />
    <MudTextField @bind-Value="content" Label="Content" ReadOnly="true" Variant="Variant.Outlined" />
    <br />
}

@code {
    private List<string> files;
    private string configFile;
    private string configType = "";
    private string content;

    protected override async Task OnInitializedAsync()
    {
        ResponseDto response = await dataConfiguration.GetRecords<ResponseDto>();
        if (response != null && response.IsSuccess)
        {
            files = JsonConvert.DeserializeObject<List<string>>(Convert.ToString(response.Result));
        }
        else
        {
            Console.WriteLine(response.ErrorMessages);
            await displayMessage.DisplayErrorMessage(" There is a problem accessing data configuration server");
        }
    }

    private async Task Selected(string selectedString)
    {
        configFile = selectedString;
        ResponseDto response = await dataConfiguration.GetRecord<ResponseDto>(configFile);
        if (configFile.StartsWith("CSV")) configType = "CSV";
        else if (configFile.StartsWith("PPDM")) configType = "PPDM";
        else configType = "";
        if (response != null && response.IsSuccess)
        {
            content = Convert.ToString(response.Result);
            Console.WriteLine(content);
        }
        else
        {
            Console.WriteLine(response.ErrorMessages);
            await displayMessage.DisplayErrorMessage(" There is a problem accessing data configuration server");
        }
    }
}
