@page "/datamodel"
@inject SingletonServices singleton
@inject IDataModelCreate dataModelCreate
@inject IDisplayMessage displayMessage
@inject NavigationManager navigationManager

<h2>Data Model</h2>

<p>Target Database: @singleton.TargetConnector</p>

<p>Select model option: </p>
@foreach (var item in new string[] { "PPDM Model", "PPDM Modifications", "DSM Model" })
{
    <div class="form-check">
        <label for="@item" class="form-check-label">
            <input type="radio" class="form-check-input" name="optradio" @onchange="ModelSelection"
                   id="@item" value="@item"
                   checked=@(selectedAnswer.Equals(item,StringComparison.OrdinalIgnoreCase)) />@item
            </label>
        </div>
    }

<div style="margin-top:20px">
    <button class="btn btn-primary" @onclick="CreateDataModel">Create Data Model</button>
</div>

<div style="margin-top:20px">
    <ProgressBar ValueNow="barValue" />
</div>

<div style="margin-top:20px">
    <p>Current status: @statusMessage</p>
</div>

@code {
    string selectedAnswer = "";
    string modelOption = "PPDM Model";
    private string statusMessage = "Not started";
    public int barValue = 0;
    DataModelParameters dmParameters = new DataModelParameters();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(singleton.TargetConnector))
        {
            await displayMessage.DisplayErrorMessage("Please select a data connector");
            navigationManager.NavigateTo("/");
        }
    }

    void ModelSelection(ChangeEventArgs args)
    {
        modelOption = args.Value.ToString();
    }

    protected async Task CreateDataModel()
    {
        dmParameters.ModelOption = modelOption;
        dmParameters.DataConnector = singleton.TargetConnector;
        barValue = 1;
        if (modelOption == "PPDM Model")
        {
            await CreatePPDMModel();
        }
        else if (modelOption == "DSM Model")
        {
            Console.WriteLine("Selected DSM Model");
            await CreateDMSModel();

        }
        else if (modelOption == "PPDM Modifications")
        {
            await CreatePpdmModifications();
        }
        else
        {
            Console.WriteLine("Bad model option");
        }
    }

    protected async Task CreatePpdmModifications()
    {
        try
        {
            progress($"Start Modify PPDM");
            await dataModelCreate.Create(dmParameters);
            progress($"PPDM Modifications complete");
        }
        catch (Exception ex)
        {
            progress($"Error creating stored procedures: {ex.Message}");
        }
        barValue = 100;
    }

    protected async Task CreateDMSModel()
    {
        try
        {
            progress($"Start DMS Model Creation");
            dmParameters.ModelOption = "DSM Model";
            dmParameters.FileShare = "taxonomy";
            await dataModelCreate.Create(dmParameters);
            barValue = 33;
            progress($"Start creating stored procedures");
            dmParameters.ModelOption = "Stored Procedures";
            await dataModelCreate.Create(dmParameters);
            barValue = 66;
            progress($"Start loading DSM rules");
            dmParameters.ModelOption = "DSM Rules";
            await dataModelCreate.Create(dmParameters);
            barValue = 100;
            progress($"DSM model completed");
        }
        catch (Exception ex)
        {
            progress($"Error creating data model: {ex.Message}");
        }
        barValue = 100;
    }

    protected async Task CreatePPDMModel()
    {
        try
        {
            dmParameters.FileShare = "ppdm39";
            int interval = 100 / (DataModelSqlFiles.Names.Count());
            foreach (string sqlFile in DataModelSqlFiles.Names)
            {
                dmParameters.FileName = sqlFile;
                progress($"Executing {sqlFile}");
                await dataModelCreate.Create(dmParameters);
                barValue = barValue + interval;
            }
            progress($"Model creation complete");
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("There is already an object"))
            {
                await displayMessage.DisplayErrorMessage("PPDM model aready exist");
            }
            else
            {
                progress($"Error creating data model: {ex.Message}");
            }
        }
        barValue = 100;
    }

    private void progress(string message)
    {
        statusMessage = message;
        StateHasChanged();
    }
}
