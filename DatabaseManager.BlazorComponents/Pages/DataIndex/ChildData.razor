@page "/ChildData/{Id:int}"
@inject SingletonServices settings
@inject IIndexView indexData
@inject NavigationManager navigationManager

<h3>@DataType</h3>

@if (AvailableHeaderColumns != null)
{
    <SelectColumns AvailableColumns="AvailableHeaderColumns" SelectedColumns="selectedColumns" Selections="Selected"></SelectColumns>
}

@if (refreshButton)
{
    <br/>
    <button class="btn btn-primary" @onclick="Refresh">Refresh</button>
    <br/>
}

@if(data.Count > 0)
{    
    <CreateTableView Data="data" Attributes="@attributes" ChildrenDrillDown="Drilldown" Taxonomy="@taxonomy" ArrayDrillDown="ArrayAction">

    </CreateTableView>
}
else
{
    <p>@message</p>
}

@code {
    [Parameter] public int Id { get; set; }
    private List<JObject> data;
    private List<JObject> originalData;
    public List<DmsIndex> index;  
    Dictionary<string, string> DisplayAttributes =
        new Dictionary<string, string>(){
            {"WellBore", "UWI, FINAL_TD, WELL_NAME, SURFACE_LATITUDE, SURFACE_LONGITUDE,LEASE_NAME, DEPTH_DATUM_ELEV, DEPTH_DATUM, OPERATOR, ASSIGNED_FIELD, CURRENT_STATUS,GROUND_ELEV,SPUD_DATE"},
            {"MarkerPick", "STRAT_NAME_SET_ID, STRAT_UNIT_ID, UWI, INTERP_ID, DOMINANT_LITHOLOGY, PICK_DEPTH"} };

    private string DataType = "";
    private string message = "No data";
    private string[] AvailableHeaderColumns;
    private IEnumerable<string> selectedColumns { get; set; }
    private string attributes = "";
    private bool refreshButton = false;
    private bool spinner = true;
    IndexFileData taxonomy;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            data = new List<JObject>();
            indexData.InitSettings(settings);
            index = await indexData.GetChildren(settings.TargetConnector, Id);
            List<IndexFileData> taxonomyList = await indexData.GetIndexTaxonomy(settings.TargetConnector);
            //Console.WriteLine($"Root Taxonomy count: {taxonomyList.Count}");
            DataType = index[0].DataType;
            //Console.WriteLine($"Index count: {index.Count}, dataType {DataType}");
            taxonomy = taxonomyList.FirstOrDefault(s => s.DataName == DataType);
            //Console.WriteLine($"Arrays: {taxonomy.Arrays}");

            originalData = CreateDataTable();
            data = originalData;
            AvailableHeaderColumns = CreateHeaderColumns();
            if (DisplayAttributes.ContainsKey(DataType) == true)
            {
                attributes = DisplayAttributes[DataType];
            }
            else
            {
                attributes = String.Join(",", AvailableHeaderColumns);
            }
            //Console.WriteLine($"Attributes: {attributes}");
            selectedColumns = CreateSelectedColumns(attributes);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private List<JObject> CreateDataTable()
    {
        List<JObject> dataTable = new List<JObject>();
        string json = "";
        foreach (DmsIndex item in index)
        {
            json = item.JsonData;
            //Console.WriteLine($"Index item: {json}");
            if (!string.IsNullOrEmpty(json))
            {
                JObject token = JObject.Parse(json);
                token.Add(new JProperty("Children", item.NumberOfDataObjects));
                token.Add(new JProperty("Id", item.Id));
                dataTable.Add(token);
            }
        }
        return dataTable;
    }

    private IEnumerable<string> CreateSelectedColumns(string selection)
    {
        List<string> parts = selection.Split(',').Select(p => p.Trim()).ToList();
        return parts;
    }

    private string[] CreateHeaderColumns()
    {
        List<string> columnList = new List<string>();
        string json = index[0].JsonData;
        JObject headerToken = JObject.Parse(json);
        foreach (JProperty property in headerToken.Properties())
        {
            columnList.Add(property.Name);
        }
        return columnList.ToArray();
    }

    private void Selected(string attributeString)
    {
        Console.WriteLine($"Selected {attributeString}");
        data = new List<JObject>();
        attributes = attributeString;
        message = "Hit the Refresh button";
        refreshButton = true;
        selectedColumns = CreateSelectedColumns(attributes);
        this.StateHasChanged();
    }

    private void Drilldown(string jsonString)
    {
        dynamic data = JObject.Parse(jsonString);
        Console.WriteLine($"Drilldown, id={data.Id}");
        navigationManager.NavigateTo($"/indexdata/{data.Id}");
    }

    private void ArrayAction(string jsonString)
    {
        dynamic data = JObject.Parse(jsonString);
        Console.WriteLine($"Drilldown, id={data.Id}");
        navigationManager.NavigateTo($"/arraydatadrilldown/{data.Id}");
    }

    private void Refresh()
    {
        Console.WriteLine("Refresh");
        message = "No data";
        refreshButton = false;
        data = originalData;
    }
}