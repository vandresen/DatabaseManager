<br />
<Table TableItem="JObject" Items="Data" PageSize="15" ColumnReorder="true">
    @foreach (var head in headers)
    {
        @if (head.Name == "Children")
        {
            <Column TableItem="JObject" Title="" Sortable="false">
                <Template>
                    @if (context.Property("Children").Value.Value<int>() > 0)
                    {
                        <button class="btn btn-info" @onclick="@(() => DrillDown(context.ToString()))">...</button>
                    }
                </Template>
            </Column>
         }
         else
         {
             <Column TableItem="JObject" Title="@head.Name" Field="@(x => x.Property(head.Name).Value)" Sortable="true" Filterable="@head.Filter" Type="@head.Type" />
         }
    }
    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>

@code {
    [Parameter] public List<JObject> Data { get; set; }
    [Parameter] public string Attributes { get; set; }
    [Parameter] public EventCallback<string> ChildrenDrillDown { get; set; }
    private List<Header> headers = new List<Header>();
    private List<string> attributeList;

    protected override void OnInitialized()
    {
        Console.WriteLine($"OnInitialized CreateTableView {Attributes}");
        attributeList = Attributes.Split(',').Select(p => p.Trim()).ToList();
        headers = CreateHeader();

        Console.WriteLine($"OnInitialized header count: {headers.Count}");
        foreach (var header in headers)
        {
            Console.WriteLine($"Header name: {header.Name}");
        }
    }

    private List<Header> CreateHeader()
    {
        Console.WriteLine("Create Header");
        List<Header> newHeader = new List<Header>();
        JObject headerToken = Data.FirstOrDefault();

        newHeader.Add(new Header() { Name = "Children", Type = typeof(string) });
        foreach (JProperty property in headerToken.Properties())
        {
            bool filter = true;
            if (Data.FirstOrDefault(s => s.Property(property.Name).Value.Type == JTokenType.Null) != null) filter = false;

            Type type = typeof(string);
            var vidar = Data.FirstOrDefault(s => s.Property(property.Name).Value != null);
            var tokenType = vidar.Property(property.Name).Value.Type;
            if (tokenType == JTokenType.Integer)
            {
                type = typeof(int);
            }
            else if (tokenType == JTokenType.Float)
            {
                type = typeof(double);
            }
            else if (tokenType == JTokenType.Date)
            {
                type = typeof(DateTime);
            }

            bool display = false;
            if (attributeList.Contains(property.Name)) display = true;

            if (display)
            {
                Console.WriteLine(property.Name);
                if (display) newHeader.Add(
                    new Header()
                        {
                            Name = property.Name,
                            Type = type,
                            Filter = filter
                        });
            }
        }

        return newHeader;
    }

    private async Task DrillDown(string jsonString)
    {
        await ChildrenDrillDown.InvokeAsync(jsonString);
    }

    public class Header
    {
        public string Name { get; set; }
        public Type Type { get; set; }
        public bool Filter { get; set; }
    }
}
