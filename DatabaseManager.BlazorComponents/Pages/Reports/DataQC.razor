@page "/dataqc"
@inject IDataQc qc
@inject SingletonServices singleton
@inject IDisplayMessage displayMessage
@inject NavigationManager navigationManager

<h3>Data QC</h3>

<Table TableItem="QcResult" Items="ResultList" PageSize="@pageSize" ColumnReorder="true">
    <Column TableItem="QcResult" Title="Rule Type" Field="@(x => x.RuleType)" Sortable="true" Filterable="true" DefaultSortColumn="true"></Column>
    <Column TableItem="QcResult" Title="Category" Field="@(x => x.RuleName)" Sortable="true" Filterable="true"></Column>
    <Column TableItem="QcResult" Title="Rule Name" Field="@(x => x.DataType)" Sortable="true" Filterable="true"></Column>
    <Column TableItem="QcResult" Title="Data Objects" Field="@(x => x.Failures)" Sortable="false" Filterable="false"></Column>
    <Column TableItem="QcResult" Title="Drilldown" Sortable="false" Filterable="false">
        <Template>
            @if (context.Failures > 0)
            {
                <button class="btn btn-info" @onclick="@(() => DrillDown(context.Id))">...</button>
            }
        </Template>
</Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" />
</Table>



@code {
    List<QcResult> ResultList;
    List<QcResult> qcPagination;

    int totalPages;
    int totalRecords;
    int curPage = 1;
    int pageSize = 10;

    private string statusMessage = "Not started";
    public int barValue = 0;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(singleton.TargetConnector))
        {
            await displayMessage.DisplayErrorMessage("Please select a data connector");
            navigationManager.NavigateTo("/");
        }
        try
        {
            ResultList = await qc.GetResults(singleton.TargetConnector);
            Console.WriteLine($"Number of report results are {ResultList.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task DrillDown(int id)
    {
        string ruleType = ResultList.Where(x => x.Id == id).Select(a => a.RuleType).First();
        Console.WriteLine(id);
        Console.WriteLine(ruleType);
        if (ruleType == "Predictions")
        {
            navigationManager.NavigateTo($"/predictiondrilldown/{id}");
        }
        else if (ruleType == "Uniqueness")
        {
            navigationManager.NavigateTo($"/uniquenessdrilldown/{id}");
        }
        else
        {
            navigationManager.NavigateTo($"/drilldown/{id}");
        }
    }
}
