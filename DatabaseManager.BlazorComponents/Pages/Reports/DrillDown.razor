@page  "/drilldown/{Id:int}"
@inject IDataQc qc
@inject IRules rules
@inject IReportEdit re
@inject SingletonServices singleton
@inject IDisplayMessage displayMessage
@using MudBlazor

<h3>@header</h3>

@if (dataIndex == null)
{
    <text>Loading Data...</text>
}
else if (dataDeleted)
{
    <text>Data has been deleted...</text>
}
else
{
    <MudTable Items="@reportList" Dense="true" Hover="true" ReadOnly="false" CanCancelEdit="true" RowEditPreview="BackupItem" 
    RowEditCancel="ResetToOriginalValue" Striped="true" IsEditRowSwitchingBlocked="false" Filter="new Func<ReportData, bool>(FilterFunc)"
    CommitEditTooltip="Commit Edit" RowEditCommit="ItemHasBeenCommitted">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@header</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col style="width:50px;" />
            <col style="width:50px;" />
            <col style="width:140px;"/>
            <col />
            <col />
            <col style="width:50px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh style="background-color:lightgray">Actions</MudTh>
            <MudTh style="background-color:lightgray">Detail</MudTh>
            <MudTh style="background-color:lightgray"><MudTableSortLabel SortBy="new Func<ReportData, object>(x=>x.Id)">Index Id</MudTableSortLabel></MudTh>
            <MudTh style="background-color:lightgray"><MudTableSortLabel SortBy="new Func<ReportData, object>(x=>x.Key)">Data Key</MudTableSortLabel></MudTh>
            <MudTh style="background-color:lightgray">@columnName</MudTh>
            <MudTh style="background-color:lightgray">Commit</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="">
                <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd>
                <MudFab @onclick="@(() => ShowBtnPress(context.Id))" Color="Color.Primary" Icon="@((context.ShowDetails == true)? @UnHideIcon : @HideIcon)" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd DataLabel="Index Id">@context.Id</MudTd>
            <MudTd DataLabel="Data Key">@context.Key</MudTd>
            @if (valueType == "number")
            {
                <MudTd DataLabel="@columnName">@context.NumberValue</MudTd>
            }
            else
            {
                <MudTd DataLabel="@columnName">@context.TextValue</MudTd>
            }
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Actions"></MudTd>
            <MudTd>
                <MudFab @onclick="@(() => ShowBtnPress(context.Id))" Color="Color.Primary" Icon="@((context.ShowDetails == true)? @UnHideIcon : @HideIcon)" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd DataLabel="Index Id">@context.Id</MudTd>
            <MudTd DataLabel="Data Key">@context.Key</MudTd>
            <MudTd DataLabel="@columnName">
            @if (valueType == "number")
            {
                <MudTextField @bind-Value="@context.NumberValue" Required />
            }
            else
            {
                <MudTextField @bind-Value="@context.TextValue" Required />
            }
        </MudTd>
        </RowEditingTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <ChildRowContent>
            @if (context.ShowDetails)
            {
                <MudTr>
                    <td colspan="4">
                        <MudCard Elevation="0">
                            <MudCardContent>
                                <MudText>Data Object</MudText>
                                <MudText Typo="Typo.body2">@context.JsonData</MudText>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
    </MudTable>
}

@code {
    [Parameter] public int Id { get; set; }
    public List<DmsIndex> dataIndex;
    List<ReportData> reportList;
    public RuleModel ruleModel;
    private ITable<ReportData> Table;
    private string header = "";
    private string dataType = "";
    private string columnName = "";
    private string valueType = "none";
    private string HideIcon = Icons.Material.Filled.Add;
    private string backupText = "";
    private string UnHideIcon = Icons.Material.Filled.HorizontalRule;
    private string searchString = "";
    private double backupNumber = 0;
    private bool dataDeleted = false;
    private bool canEdit = false;
    int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Rule id = {Id}");

        ruleModel = await rules.GetRule(singleton.TargetConnector, Id);
        string ruleAttribute = ruleModel.DataAttribute.Trim();
        header = ruleModel.RuleName;
        dataType = ruleModel.DataType;
        columnName = ruleModel.DataAttribute;
        canEdit = ruleModel.RuleType == "Validity" || ruleModel.RuleType == "Completeness";

        List<string> keyList = new List<string>();
        List<DataAccessDef> accessDefs = JsonConvert.DeserializeObject<List<DataAccessDef>>(singleton.DataAccessDefinition);
        DataAccessDef dataDef = accessDefs.FirstOrDefault(x => x.DataType == dataType);
        if (dataDef != null) keyList = dataDef.Keys.Split(',').ToList();

        if (canEdit)
        {
            AttributeInfo info = await re.GetAttributeInfo(singleton.TargetConnector, dataType);
            Console.WriteLine($"Number of attributes: {info.DataAttributes.Count}");
            if (!info.DataAttributes.TryGetValue(columnName, out valueType)) 
            {
                Console.WriteLine($"Error: Could not get a value for {columnName}");
            }
            if (valueType == "System.Decimal") { valueType = "number"; }
            else { valueType = "text"; }
            Console.WriteLine($"Value type is {valueType}");
        }
        List<ReportData> reportList = await CreateReportList();
        Console.WriteLine($"Number of failures are {dataIndex.Count}");
    }

    private async void ItemHasBeenCommitted(object item)
    {
        Console.WriteLine($"RowEditCommit event: Changes to Element {((ReportData)item).Key} committed");
        await re.Update(singleton.TargetConnector, (ReportData)item);
    }

    private async Task Delete(int id)
    {
        Console.WriteLine($"Delete index id {id}");
        await re.Delete(singleton.TargetConnector, id);
        List<ReportData> reportList = await CreateReportList();
        this.StateHasChanged();
    }

    private bool FilterFunc(ReportData item)
    {
        Console.WriteLine($"Filter Function");
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (item.JsonData.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void ShowBtnPress(int id)
    {
        ReportData item = reportList.First(f => f.Id == id);
        item.ShowDetails = !item.ShowDetails;
    }

    private void BackupItem(object element)
    {
        Console.WriteLine($"Backup Function");
        if (valueType == "number")
        {
            backupNumber = ((ReportData)element).NumberValue;
        }
        else
        {
            backupText = ((ReportData)element).TextValue;
        }
    }

    private void ResetToOriginalValue(object element)
    {
        Console.WriteLine($"Reset value");
        if (valueType == "number")
        {
            ((ReportData)element).NumberValue = backupNumber;
        }
        else
        {
            ((ReportData)element).TextValue = backupText;
        }
    }

    private async Task<List<ReportData>> CreateReportList()
    {
        dataIndex = await qc.GetResult(singleton.TargetConnector, Id);
        if (dataIndex.Count == 0) dataDeleted = true;
        else if (dataIndex != null )
        {
            DmsIndex firstObject = dataIndex.First();
            string jsonData = firstObject.JsonData;
            if (string.IsNullOrEmpty(jsonData)) dataDeleted = true;
        }
        reportList = new List<ReportData>();
        foreach (var item in dataIndex)
        {
            string key = item.DataKey;
            string value = "";
            double number = 0.0;
            reportList.Add(new ReportData
            {
                Id = item.Id,
                JsonData = item.JsonData,
                Key = key,
                TextValue = value,
                ColumnName = columnName,
                ColumnType = valueType,
                RuleKey = ruleModel.RuleKey,
                DataType = dataType,
                NumberValue = number
            });
        }
        return reportList;
    }

    private class DataAccessDef
    {
        public string DataType { get; set; }
        public string Select { get; set; }
        public string Keys { get; set; }
    }
}
