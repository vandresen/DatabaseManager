<GenericList List="TableCollections">
    <WholeListTemplate>
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th></th>
                    @foreach (var head in headers)
                    {
                        <th style="cursor: pointer;" @onclick="@(() => SortTable(head))">
                            @head
                            <span class="fa @(SetSortIcon(head))" style="float: right"></span>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var dataSetItem in tablePagination)
                {
                    <tr>
                        @if (dataSetItem.ChildCount > 0)
                        {
                            <td>
                                <a class="btn btn-info" href="/indexdata/@dataSetItem.IndexId">...</a>
                            </td>
                        }
                        else
                        {
                            <td></td>
                        }
                        @foreach (var dataItem in dataSetItem.Rows)
                        {
                            <td>@dataItem.Value</td>
                        }
                    </tr>
                }

            </tbody>
        </table>

        <Pagination CurrentPage="@curPage" TotalAmountPages="totalPages"
                    SelectedPage="SelectedPage" />
    </WholeListTemplate>
</GenericList>

@code {
    [Parameter] public List<DmsIndex> index { get; set; }
    private List<ChildTableCollection> TableCollections;
    private List<string> headers = new List<string>();
    Dictionary<string, string> DisplayAttributes =
    new Dictionary<string, string>(){
            {"WellBore", "UWI, FINAL_TD, WELL_NAME, SURFACE_LATITUDE, SURFACE_LONGITUDE,LEASE_NAME, DEPTH_DATUM_ELEV, DEPTH_DATUM, OPERATOR, ASSIGNED_FIELD, CURRENT_STATUS,GROUND_ELEV"},
            {"MarkerPick", "STRAT_NAME_SET_ID, STRAT_UNIT_ID, UWI, INTERP_ID, DOMINANT_LITHOLOGY, PICK_DEPTH"},
            {"data", "Pig"} };

    private string DataType = "";
    private string activeSortColumn;
    private bool isSortedAscending;

    JArray tableArray;
    List<ChildTableCollection> tablePagination;
    int curPage;
    int pageSize;
    int totalPages;
    int totalRecords;
    string sortColumnName;
    string sortDir = "DESC";

    protected override void OnInitialized()
    {
        curPage = 1;
        pageSize = 10;
        DataType = index[0].DataType;
        headers = GetHeader();
        tableArray = GetJsonArray();
        TableCollections = GetTable();
        tablePagination = TableCollections.Skip((curPage - 1) * pageSize).Take(pageSize).ToList();
        totalRecords = TableCollections.Count();
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
    }

    private List<string> GetHeader()
    {
        List<string> headerList = new List<string>();
        DmsIndex idx = index[0];
        string json = idx.JsonData;
        JObject headerToken = JObject.Parse(json);

        foreach (JProperty property in headerToken.Properties())
        {
            bool display = true;
            if (DisplayAttributes.ContainsKey(DataType) == true)
            {
                display = false;
                String attributeString = DisplayAttributes[DataType];
                if (attributeString.Contains(property.Name)) display = true;
            }
            if (display) headerList.Add(property.Name);
        }
        return headerList;
    }

    private JArray GetJsonArray()
    {
        JArray array = new JArray();
        foreach (DmsIndex item in index)
        {
            string json = item.JsonData;
            Console.WriteLine(json);
            if (!string.IsNullOrEmpty(json))
            {
                JObject token = JObject.Parse(json);
                array.Add(token);
            }
        }
        return array;
    }

    private List<ChildTableCollection> GetTable()
    {
        List<ChildTableCollection> table = new List<ChildTableCollection>();
        foreach (DmsIndex item in index)
        {
            Console.WriteLine($"Original: {item.Id} - {item.NumberOfDataObjects}");
            string json = item.JsonData;
            if (!string.IsNullOrEmpty(json))
            {
                JObject token = JObject.Parse(json);
                List<ChildTableRow> childTableRows = new List<ChildTableRow>();
                foreach (JProperty property in token.Properties())
                {
                    bool display = true;
                    if (DisplayAttributes.ContainsKey(DataType) == true)
                    {
                        display = false;
                        String attributeString = DisplayAttributes[DataType];
                        if (attributeString.Contains(property.Name)) display = true;
                    }
                    if (display)
                    {
                        string columnValue = property.Value.ToString();
                        childTableRows.Add(new ChildTableRow { Value = columnValue });
                    }
                }
                table.Add(new ChildTableCollection
                {
                    Rows = childTableRows,
                    ChildCount = item.NumberOfDataObjects,
                    IndexId = item.Id
                });
            }
        }
        return table;
    }

    private void SelectedPage(int page)
    {
        curPage = page;
        tablePagination = new List<ChildTableCollection>();
        tablePagination = TableCollections.Skip((curPage - 1) * pageSize).Take(pageSize).ToList();
        this.StateHasChanged();
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private void SortTable(string columnName)
    {
        IOrderedEnumerable<JToken> sorted;
        if (columnName != activeSortColumn)
        {
            sorted = tableArray.OrderBy(obj => (string)obj[columnName]);
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                sorted = tableArray.OrderByDescending(obj => (string)obj[columnName]);
            }
            else
            {
                sorted = tableArray.OrderBy(obj => (string)obj[columnName]);
            }

            isSortedAscending = !isSortedAscending;
        }
        TableCollections = GetSortedTable(sorted);
        curPage = 1;
        tablePagination = new List<ChildTableCollection>();
        tablePagination = TableCollections.Skip((curPage - 1) * pageSize).Take(pageSize).ToList();
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
        this.StateHasChanged();
    }

    private List<ChildTableCollection> GetSortedTable(IOrderedEnumerable<JToken> sorted)
    {
        List<ChildTableCollection> table = new List<ChildTableCollection>();
        foreach (var item in sorted)
        {
            int childCount = 0;
            int indexId = -1;
            string json = item.ToString();
            JObject token = JObject.Parse(json);
            List<ChildTableRow> childTableRows = new List<ChildTableRow>();
            foreach (JProperty property in token.Properties())
            {
                string columnValue = property.Value.ToString();
                //if (string.IsNullOrEmpty(columnValue)) columnValue = "Unknown";
                childTableRows.Add(new ChildTableRow { Value = columnValue });
            }
            string rowString = GetRowString(childTableRows);
            foreach (var collection in TableCollections)
            {
                string originalRow = GetRowString(collection.Rows);
                if (rowString == originalRow)
                {
                    childCount = collection.ChildCount;
                    indexId = collection.IndexId;
                    Console.WriteLine($"Sorted: {indexId} - {childCount}");
                }
            }
            table.Add(new ChildTableCollection
            {
                Rows = childTableRows,
                ChildCount = childCount,
                IndexId = indexId
            });
        }
        return table;
    }

    private string GetRowString(List<ChildTableRow> rows)
    {
        string rowString = "";
        foreach (ChildTableRow row in rows)
        {
            rowString = rowString + ";" + row.Value;
        }
        return rowString;
    }

    public class ChildTableCollection
    {
        public List<ChildTableRow> Rows { get; set; }
        public int ChildCount { get; set; }
        public int IndexId { get; set; }
    }

    public class ChildTableRow
    {
        public string Value { get; set; }
    }
}
